class Iterator extends Command

  signature: [
  	collection: ['Object'],
  	body: null
  ]
  

  # Set rule body scope to a found element
  solve: (engine, operation, continuation, scope, ascender, ascending) ->
    if operation.index == 2 && !ascender && ascending?
      @_solve engine, operation, continuation, ascending, operation
      return false

  # Capture commands generated by css rule conditional branch
  capture: (engine, result, parent, continuation, scope) ->
    if !result.nodeType && !engine.isCollection(result) && typeof result != 'string'
      engine.provide result
      return true

  
Command.define.call Iterator 
  # CSS rule
  
  "rule":
    index: 'rules'
    
  "each":
    
  
module.exports = Iterator