Command = require('../concepts/Command')

class Iterator extends Command
  type: 'Iterator'
  
  signature: [
  	collection: ['Query', 'Selector'],
  	body: ['Any']
  ]

  # Capture commands generated by css rule block
  yield: (result, engine, operation, continuation, scope) ->
    if operation.parent.indexOf(operation) == 1
      contd = engine.Continuation.get(continuation, null, engine.Continuation.DESCEND)
      op = operation.parent[2]
      op.command.solve engine, op, contd, result
      return true
  
  # Only evaluate first argument when going top down
  descend: (engine, operation, continuation, scope, ascender, ascending) ->
    argument = operation[1]
    command = argument.command || engine.Command(argument)
    argument.parent ||= operation
    
    command.solve(operation.domain || engine, argument, continuation, scope)
    return false
  
  
Iterator.define
  # CSS rule
  
  "rule":
    index: 'rules'
    
  "each": {}
  
module.exports = Iterator